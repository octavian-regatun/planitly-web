// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  GroupMember GroupMember[]
}

model GroupMember {
  id        Int             @id @default(autoincrement())
  role      GroupMemberRole @default(MEMBER)
  status    Status          @default(PENDING)
  groupId   Int
  userId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  group     Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id          Int      @id @default(autoincrement())
  requesterId String
  recipientId String
  status      Status   @default(PENDING)
  requester   User     @relation("requester", fields: [requesterId], references: [id], onDelete: Cascade)
  recipient   User     @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  location    Location      @relation(fields: [locationId], references: [id])
  startDate   DateTime
  endDate     DateTime
  allDay      Boolean
  sameDay     Boolean
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  EventMember EventMember[]
  locationId  Int
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event[]
}

model EventMember {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String        @id @default(cuid())
  firstName              String
  lastName               String
  email                  String?       @unique
  emailVerified          Boolean?
  image                  String
  username               String        @unique
  accounts               Account[]
  sessions               Session[]
  friendshipsAsRecipient Friendship[]  @relation("recipient")
  friendshipsAsRequester Friendship[]  @relation("requester")
  GroupMember            GroupMember[]
  EventMember            EventMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  PENDING
  ACCEPTED
}

enum GroupMemberRole {
  MEMBER
  ADMIN
}
