// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String       @id @default(cuid())
    name              String?
    email             String?      @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    posts             Post[]
    user1Friendships  Friendship[] @relation("user1")
    user2Friendships  Friendship[] @relation("user2")
    authorFriendships Friendship[] @relation("author")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum FriendshipStatus {
    PENDING
    ACCEPTED
}

model Friendship {
    id Int @id @default(autoincrement())

    user1   User   @relation("user1", fields: [user1Id], references: [id])
    user1Id String

    user2   User   @relation("user2", fields: [user2Id], references: [id])
    user2Id String

    author   User   @relation("author", fields: [authorId], references: [id])
    authorId String

    status FriendshipStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([user1Id, user2Id])
}
